snippet elmtestimports
import Test exposing (Test, describe, test)
import Expect
import Test.Html.Selector exposing (text, tag, attribute)
import Test.Html.Query as Query
endsnippet

snippet elmtestboilerplate
module MyTests exposing (..)

import Test exposing (Test, describe, test)
import Expect
import Test.Html.Selector exposing (text, tag, attribute)
import Test.Html.Query as Query

tests : Test
tests =
    describe "Put.The.Full.Module.Path.Here"
        [ fooTest
        -- , barTest
        ]

fooTest : Test
fooTest =
    let
        varA =
            1
    in
        describe "something"
            [ test "does something" <|
                \() ->
                    callAfunction varA
                        |> Expect.equal (Someting)
            -- , test "does something " <|
            --     \() ->
            --         callAfunction varA
            --             |> Expect.equal (Someting)
            ]

-- barTest : Test
-- barTest =
--     let
--         varA =
--             1
--     in
--         describe "something"
--             [ test "does something" <|
--                 \() ->
--                     callAfunction varA
--                         |> Expect.equal (Someting)
--             -- , test "does something " <|
--             --     \() ->
--             --         callAfunction varA
--             --             |> Expect.equal (Someting)
--             ]
endsnippet

snippet elmprogram
module Main exposing (..)

import Html exposing (..)


-- MODEL


type alias Model =
    { content : String
    }


model : ( Model, Cmd Msg )
model =
    ( Model "Hello!", Cmd.none )



-- UPDATE


type Msg
    = Reset


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        Reset ->
            ( model, Cmd.none )



-- VIEW


view : Model -> Html Msg
view model =
    h1 [] [ text model.content ]



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions model =
    Sub.none



-- APP


main : Program Never Model Msg
main =
    Html.program
        { init = model
        , view = view
        , update = update
        , subscriptions = subscriptions
        }
endsnippet

snippet iconimports
import Icon.Icon as Icon
import Icon.SvgAsset exposing (svgAsset)
import Html.Extra exposing (static)
endsnippet

snippet iconpresentation
Icon.view
    Icon.presentation
    (svgAsset "cultureamp-style-guide/icons/some-name.svg")
    > static
endsnippet

snippet icon
Icon.view (Icon.img "aria title") (svgAsset "cultureamp-style-guide/icons/some-name.svg") "some-id-icon" |> static
endsnippet

snippet cssmodulesimports
import CssModules exposing (css)
endsnippet

snippet cssmodulesdeclaration
{ class, classList } =
    css "ca-some-app/Thing.scss"
        { foo = ""
        , bar = ""
        }
endsnippet

snippet paragraphimport
import Paragraph.Paragraph as Paragraph exposing (TypeVariant(..))
endsnippet

snippet paragraphbody
Paragraph.view
    (Paragraph.p |> Paragraph.variant Body)
    []
endsnippet

snippet boximport
import Box.Box as Box exposing (..)
endsnippet

snippet box
box [ marginBottom 1 ]
    []
endsnippet

snippet headingimport
import Heading.Heading as Heading exposing (TypeVariant(..))
endsnippet

snippet heading
Heading.view
    (Heading.h2 |> Heading.variant Heading2)
    [ Html.text "Heading2" ]
endsnippet

